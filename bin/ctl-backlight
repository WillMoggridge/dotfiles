#!/usr/bin/env python3

import argparse
import os
from bisect import bisect_left, bisect_right
from math import floor
from subprocess import run, check_output


DEBUG = False

BACKLIGHT_LEVELS = [1, 2, 3, 5, 8, 13, 20, 40, 60, 80, 100]
INTEL_CMD = 'sudo tee /sys/class/backlight/intel_backlight/brightness'
# Add to sudo file using `visudo`
# username ALL=(ALL) NOPASSWD: /usr/bin/tee /sys/class/backlight/intel_backlight/brightness
INTEL_PATH = '/sys/class/backlight/intel_backlight/brightness'
INTEL_MAX = 120000
INTEL_MIN = 500
IS_INTEL_BACKLIGHT = os.path.exists(INTEL_PATH)
XBACKLIGHT_CMD = '/usr/bin/xbacklight'


def _debug(msg):
    if DEBUG:
        print(msg)


def _get_intel_current_percent():
    _debug("# Getting Intel value")
    with open(INTEL_PATH, 'r') as brightness:
        raw_value = brightness.read()
    _debug("Current raw value: " + raw_value.strip())
    percent = floor((int(raw_value) / INTEL_MAX) * 100)
    return percent


def _set_intel_backlight_percent(percent):
    _debug("# Setting Intel value")
    raw_value = floor((percent * INTEL_MAX) / 100)
    _debug("New raw value: " + str(raw_value))
    run(INTEL_CMD, input=str(raw_value).encode(), shell=True)


def get_current_percent():
    if IS_INTEL_BACKLIGHT:
        percent = _get_intel_current_percent()
    else:
        percent = floor(float(check_output(XBACKLIGHT_CMD))) + 1
    _debug("Current percent: " + str(percent))
    return percent


def set_backlight_percent(percent):
    _debug("New percent: " + str(percent))
    if IS_INTEL_BACKLIGHT:
        _set_intel_backlight_percent(percent)
    else:
        run([XBACKLIGHT_CMD, '=', str(percent)])


def decrease_backlight():
    current_percent = get_current_percent()
    level_index = bisect_left(BACKLIGHT_LEVELS, current_percent) - 1
    _debug("Lookup new level index: " + str(level_index))
    if not level_index < 0:
        set_backlight_percent(BACKLIGHT_LEVELS[level_index])


def increase_backlight():
    current_percent = get_current_percent() + 1
    level_index = bisect_right(BACKLIGHT_LEVELS, current_percent)
    _debug("Lookup new level index: " + str(level_index))
    if len(BACKLIGHT_LEVELS) > level_index:
        set_backlight_percent(BACKLIGHT_LEVELS[level_index])


def get_arguments():
    parser = argparse.ArgumentParser(description='change backlight level')
    parser.add_argument('action', type=str, choices=['+', '-'], help='+ or -')
    return parser.parse_args()


def main():
    args = get_arguments()
    action = args.action

    if action == '-':
        decrease_backlight()

    if action == '+':
        increase_backlight()


if __name__ == "__main__":
    main()
