#!/usr/bin/env python3

from bisect import bisect_right
from collections import OrderedDict
from subprocess import check_output
import os
import re


COLOR_OPTIONS = OrderedDict((
    (20, '#FF3300'),
    (30, '#FF6600'),
    (40, '#FF9900'),
    (50, '#FFCC00'),
    (60, '#FFFF00'),
    (70, '#FFFF33'),
    (80, '#FFFF66'),
    (101, '#FFFFFF'),
))
ICON_PLUGGED_IN = ''
ICON_OPTIONS = OrderedDict((
    (10, ''),
    (25, ''),
    (50, ''),
    (75, ''),
    (101, ''),
))


def get_battery_status():
    status_output = check_output(
        ['acpi'],
        universal_newlines=True,
        stderr=open(os.devnull, 'w'),
    )
    if not status_output or "Battery 0: Discharging, 0%" in status_output:
        return None
    ac_adapter_output = check_output(['acpi', '-a'], universal_newlines=True)

    def _process(status):
        parsed = re.search(
            '\w+ (?P<id>\d+)\W*(?P<status>\w+)\D*(?P<percent>\d+).*',
            status,
        )
        battery = {
            'id': parsed.group('id'),
            'percent': parsed.group('percent'),
            'status': parsed.group('status'),
        }
        battery['is_plugged_in'] = bool(re.match(
            'Adapter {id}\: on-line'.format(id=battery['id']),
            ac_adapter_output,
        ))
        return battery

    return [_process(status) for status in status_output.strip().split('\n')]


def get_color(percent):
    option_keys = list(COLOR_OPTIONS.keys())
    rounded = bisect_right(option_keys, int(percent))
    return COLOR_OPTIONS[option_keys[rounded]]


def get_icon(percent, is_plugged_in=False):
    if is_plugged_in:
        return ICON_PLUGGED_IN
    option_keys = list(ICON_OPTIONS.keys())
    rounded = bisect_right(option_keys, int(percent))
    return ICON_OPTIONS[option_keys[rounded]]


def battery_block():
    batteries = get_battery_status()
    if not batteries:
        exit()

    battery_id = os.getenv('BLOCK_INSTANCE')
    if battery_id:
        batteries = [
            battery for battery in batteries if battery['id'] == battery_id
        ]

    total_battery_percent = 0
    for battery in batteries:
        percent = int(battery['percent'])
        total_battery_percent += percent

        color = get_color(battery['percent'])
        icon = get_icon(
            percent=percent,
            is_plugged_in=battery['is_plugged_in']
        )
        percent_output = (
            '{percent}%'.format(percent=battery['percent'])
        )
        output = '{icon} {percent}'.format(
            icon=icon,
            percent=percent_output,
        )

        print(
            (
                "{long}\n"
                "{short}\n"
                "{color}"
            ).format(
                long=output,
                short=output,
                color=color
            )
        )

    if total_battery_percent < 20:
        exit(33)


if __name__ == "__main__":
    battery_block()
